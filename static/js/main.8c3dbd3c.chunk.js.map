{"version":3,"sources":["assets/frog.png","assets/spotifylogo.png","Login.js","components/PlaylistCard.js","components/Playlists.js","functions/helperFunctions.js","components/Song.js","components/SongList.js","sections/SongSection.js","sections/LyricSection.js","components/StatCard.js","components/ListTab.js","components/ChartTab.js","sections/StatSection.js","functions/backendCalls.js","Main.js","functions/Auth.js","Token.js","App.js","index.js"],"names":["Login","Navbar","expand","className","Brand","Jumbotron","href","src","spotifyLogo","alt","frogGraphic","PlaylistCard","props","onClick","console","log","playlist","select","style","paddingRight","index","selected","name","Playlists","components","list","map","p","id","Row","visible","Button","hide","size","variant","formatDuration","ms","str","totalSeconds","Math","round","secs","floor","toString","formatArtistList","length","artistList","slice","Song","track","artists","audioStats","audio","Object","keys","key","Card","Accordion","Toggle","as","Header","eventKey","selectSong","Collapse","Body","album","release_date","duration_ms","SongList","s","audioFeatures","defaultActiveKey","SongSection","showPlaylists","hideFunc","selectedSongs","selectSongFunc","LyricSection","lyricComponents","lyrics","lyricHTML","html","path","push","dangerouslySetInnerHTML","__html","i","song","target","songClicked","Spinner","animation","StatCard","label","x","charAt","toUpperCase","maxLabel","maxSong","minLabel","minSong","ListTab","statComponents","stats","favoriteArtists","favoriteGenres","max_danceability","min_danceability","max_energy","min_energy","max_instrumentalness","min_instrumentalness","max_liveness","min_liveness","max_loudness","min_loudness","max_speechiness","min_speechiness","max_tempo","min_tempo","ChartTab","artistData","songs","freq","a","data","entries","value","sort","b","artistDataToGraph","genreData","genreDataToGraph","allGenres","containerHeight","height","ResponsiveContainer","width","BarChart","layout","barSize","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","type","YAxis","dataKey","Tooltip","Legend","Bar","fill","StatSection","Tabs","Tab","title","backendURL","fetchProfileName","token","setFunc","axios","get","headers","params","accessToken","then","res","displayName","catch","err","fetchAllPlaylists","playlists","fetchAPlaylist","url","get100Songs","offset","fullList","isComplete","result","fetchAudioFeatures","get100Audio","idList","allAudio","ids","count","fetchArtistFeatures","get50Artists","genreStats","Main","useState","username","setUsername","setPlaylists","selectedPlaylist","setSelectedPlaylist","setShowPlaylists","setSelectedSongs","setAudioFeatures","artistGenres","setArtistGenres","statsObject","setStatsObject","clickedSong","setClickedSong","setLyrics","loadPage","getArtistFeatures","bigObject","mergeObjects","toggleShowPlaylist","useEffect","genres","post","fetchStats","artist","fetchLyrics","document","querySelector","loadingSpinner","Text","OverlayTrigger","placement","overlay","signOut","data-rh","initialPrimarySize","minPrimarySize","minSecondarySize","songIndex","Auth","code","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","body","window","history","pushState","location","interval","setInterval","clearInterval","Token","setToken","Promise","resolve","getToken","App","signedIn","setSignedIn","setCode","URLSearchParams","search","spotifyLogoutWindow","open","setTimeout","close","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8c3dbd3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/frog.6de8bb0d.png\";","export default __webpack_public_path__ + \"static/media/spotifylogo.3a0f4653.png\";","import frogGraphic from './assets/frog.png';\r\nimport spotifyLogo from './assets/spotifylogo.png';\r\n\r\nimport { Jumbotron, Navbar } from 'react-bootstrap';\r\nimport './styles.scss';\r\n\r\nconst AUTH_URL =\r\n  `https://accounts.spotify.com/authorize?client_id=89f488fad6fc4e67a2607dba4d955997&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`\r\n\r\nconst Login = () => {\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" className=\"my-navbar justify-content-between\">\r\n        <Navbar.Brand className=\"nav-text\">\r\n          Statify\r\n        </Navbar.Brand>\r\n\r\n      </Navbar>\r\n      <div className=\"login-page\">\r\n        <Jumbotron className=\"landing-jumbotron\">\r\n          {/* <Container\r\n          className=\"d-flex justify-content-center align-items-center\"\r\n          style={{ minHeight: \"50vh\" }}\r\n        > */}\r\n          <h1>How do you listen?</h1>\r\n          <h6>Lyrics, stats, and more</h6>\r\n          <a className=\"btn btn-lg login-btn btn-gradient\" href={AUTH_URL}>\r\n            <div className=\"login-btn-row\">\r\n              <p className=\"btn-text\">Login With Spotify\r\n            </p>\r\n            <span className=\"logo-circle btn-text\"><img src={spotifyLogo} className=\"spotify-logo\" alt=\"\"/>\r\n               </span>\r\n            </div>\r\n            \r\n          </a>\r\n          {/* </Container> */}\r\n        </Jumbotron>\r\n        <div className=\"music-notes\">\r\n          <div className=\"note note1\"></div>\r\n          <div className=\"note note2\"></div>\r\n        </div>\r\n        <img src={frogGraphic} alt=\"\"  className=\"frog-img\"/>\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport '../styles.scss';\r\n\r\n\r\nconst PlaylistCard = (props) => {\r\n    // return (\r\n    //     <div>\r\n            \r\n    //         <h3>{props.playlist.name}</h3>\r\n    //     </div>\r\n    // );\r\n    \r\n    return (\r\n        <div className=\"playlist-card cursor-hover\"\r\n            onClick={() => {console.log(props.playlist); props.select(props.playlist);}}>\r\n                <span style={{paddingRight: \"20px\"}}>{props.index}.</span>\r\n                {props.selected ? \r\n                 <strong>{props.playlist.name}</strong>\r\n                 :\r\n                props.playlist.name}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlaylistCard;","import React from 'react';\r\nimport { Row, Button } from 'react-bootstrap';\r\n\r\nimport PlaylistCard from './PlaylistCard';\r\nimport '../styles.scss';\r\n\r\nconst Playlists = (props) => {\r\n    const components = props.list ? props.list.map((p, index) => {\r\n        return <PlaylistCard \r\n            playlist={p} \r\n            select={props.select} \r\n            selected={props.selected ? props.selected.id === p.id : false}\r\n            index={index + 1}\r\n            />;\r\n    }) : null;\r\n\r\n    return (\r\n        <div>\r\n            <Row className=\"playlists-row row justify-content-around\">\r\n                <div className=\"text-container\">\r\n                    <h2>Your<br/>Playlists</h2>\r\n                </div>\r\n                \r\n                <div className=\"playlists-list col-6\" >\r\n                    {components}\r\n                </div>\r\n                {props.visible ?\r\n                <Button onClick={props.hide} size=\"md\" variant=\"outline-info\" className=\"show-playlists-btn\">\r\n                    Hide \r\n                </Button>\r\n                : null }\r\n            </Row>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Playlists;","export const formatDuration = (ms) => {\r\n    let str = \"\";\r\n    let totalSeconds = Math.round(ms / 1000);\r\n    let secs = totalSeconds % 60;\r\n    if (totalSeconds >= 60) {\r\n        let mins = Math.floor(totalSeconds / 60);\r\n        str += mins.toString() + \" min \";\r\n        str += secs.toString() + \" sec\";\r\n    } else {\r\n        str += secs.toString() + \" secs\";\r\n    }\r\n    return str;\r\n}\r\n\r\nexport const formatArtistList = (list) => {\r\n    if (list.length !== 0) {\r\n        let artistList = \"\";\r\n        for (let artist of list) {\r\n            artistList += artist.name;\r\n            artistList += \", \";\r\n        }\r\n        return artistList.slice(0, -2);\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport const mergeObjects = (list) => {\r\n    let bigObject = list.length != 0 ? list[0] : null;\r\n    if (list.length > 1) {\r\n        for (let i = 1; i < list.length; i++) {\r\n            for (const [key, value] of Object.entries(list[i])) {\r\n                if (key in bigObject) {\r\n                    bigObject[key] += value;\r\n                } else {\r\n                    bigObject[key] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(bigObject)\r\n    return bigObject;\r\n}\r\n\r\nexport const capitalize = (s) => {\r\n    if (s.length > 0) {\r\n        if (s.length > 1) {\r\n            return s.charAt(0).toUpperCase() + s.slice(1);\r\n        } else {\r\n            return s.charAt(0).toUpperCase();\r\n        }\r\n    }\r\n    return s;\r\n}","import '../styles.scss';\r\nimport { Accordion, Card } from 'react-bootstrap';\r\nimport { formatDuration, formatArtistList } from '../functions/helperFunctions';\r\n\r\nconst Song = (props) => {\r\n\r\n    let artistList = formatArtistList(props.track.artists);\r\n\r\n    const audioStats = props.audio ? Object.keys(props.audio).map((key) => {\r\n        return <p>{key}: {props.audio[key]}</p>\r\n    }) : null;\r\n\r\n    return (\r\n        <div className=\"song-entry\">\r\n            <Card>\r\n                <Accordion.Toggle\r\n                    as={Card.Header}\r\n                    eventKey={props.index}\r\n                    className=\"song-clickable cursor-hover\"\r\n                    onClick={() => { props.selectSong(props.index - 1) }}\r\n                >\r\n                    <span>\r\n                        {props.index} {\". \"}\r\n                        <strong>{props.track.name}</strong> {\" \"}\r\n                        {artistList}\r\n                    </span>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={props.index}>\r\n                    <Card.Body className=\"song-info\" id={`song-info-${props.index - 1}`}>\r\n                        <p>Album: {props.track.album.name} (released on {props.track.album.release_date})</p>\r\n                        <p>Duration: {formatDuration(props.track.duration_ms)}</p> <br />\r\n                        <p><u>Audio Data (provided by Spotify)</u></p>\r\n                        {audioStats}\r\n                        <br />\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Song;","import Song from './Song';\r\nimport '../styles.scss';\r\n\r\nimport { Accordion } from 'react-bootstrap';\r\n\r\nconst SongList = (props) => {\r\n    const components = props.list ? props.list.map((s, index) => {\r\n        return <Song track={s.track} index={index + 1} audio={props.audioFeatures[index]} {...props}/>;\r\n    }) : null;\r\n    return (\r\n        <div className=\"song-list\">\r\n            <Accordion defaultActiveKey=\"0\" className=\"song-accordion\">\r\n                {components}\r\n            </Accordion>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SongList;","import SongList from \"../components/SongList\";\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst SongSection = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"playlist-title-row\">\r\n                <div className=\"playlist-title\">\r\n                <h6>Selected Playlist: </h6><h4><strong>{props.playlist}</strong></h4>\r\n\r\n                </div>\r\n                {!props.showPlaylists ?\r\n                    <Button onClick={props.hideFunc} size=\"sm\" variant=\"outline-success\" className=\"show-playlists-btn\">\r\n                        Choose a different playlist\r\n                    </Button>\r\n                    : null}\r\n            </div>\r\n            <SongList list={props.selectedSongs} audioFeatures={props.audioFeatures} selectSong={props.selectSongFunc} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SongSection;","\r\nimport { formatArtistList } from '../functions/helperFunctions';\r\n\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nconst LyricSection = (props) => {\r\n    const geniusURL = 'https://genius.com';\r\n    const lyricComponents = [];\r\n    if (props.lyrics && props.lyrics.lyricHTML) {\r\n        const html = props.lyrics.lyricHTML;\r\n\r\n        if (props.lyrics.path === \"ERROR\") {\r\n            console.log(html);\r\n            lyricComponents.push(<div dangerouslySetInnerHTML={{ __html: html[0] }} className=\"no-lyric-msg\"></div>)\r\n\r\n        } else if (props.lyrics.lyricHTML.length > 0) {\r\n            // console.log(props.lyrics.lyricHTML);\r\n            if (html.length > 1) {\r\n                for (let i = 0; i < html.length; i++) {\r\n                    lyricComponents.push(<div dangerouslySetInnerHTML={{ __html: html[i] }}></div>)\r\n                    lyricComponents.push(<br/>)\r\n                }\r\n            } else {\r\n                lyricComponents.push(<div dangerouslySetInnerHTML={{ __html: html[0] }}></div>)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h5>Lyrics</h5>\r\n            {props.song && props.lyrics ?\r\n                <div>\r\n                    <h6 className=\"lyric-title\">\r\n                        <strong>{props.song.track.name}</strong> by <strong>{formatArtistList(props.song.track.artists)}</strong>\r\n                    </h6>\r\n                    <br />\r\n                    <div className=\"lyric-container\">\r\n                        {lyricComponents}\r\n                    </div>\r\n                    <br />\r\n                    {props.lyrics.path !== \"ERROR\" ? \r\n                    <a href={geniusURL + props.lyrics.path} target=\"_blank\">Lyric Source: Genius</a>\r\n                    : null }\r\n                </div>\r\n                :\r\n                props.songClicked ?\r\n                    <div className=\"triple-spinners\">\r\n                        <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n                        <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n                        <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n                    </div>\r\n                    : <p>Click on a song to display its lyrics</p>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LyricSection;","import { capitalize } from '../functions/helperFunctions';\r\n\r\nconst StatCard = (props) => {\r\n    \r\n    return (\r\n        <div className=\"stat-card\">\r\n            {props.label && props.list && props.list.length !== 0 ? \r\n            // for statistics with a list e.g. top 3\r\n            <div>\r\n            <p className=\"stat-label\"><em>{props.label}{\": \"}</em></p>\r\n            <div>{props.list.map((x, index) => {\r\n                return <p>{index + 1}. {capitalize(x)}</p>\r\n                })}\r\n            </div>\r\n            </div>\r\n            :\r\n            // for statistics with a most and least superlative\r\n            <div>\r\n            <p className=\"stat-label\"><em>{props.maxLabel}{\": \"}</em></p><p>{props.maxSong.track.name}</p>\r\n            <p className=\"stat-label\"><em>{props.minLabel}{\": \"}</em></p><p>{props.minSong.track.name}</p>\r\n            </div>\r\n            }           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatCard;","import StatCard from '../components/StatCard';\r\n\r\n\r\nconst ListTab = (props) => {\r\n\r\n    const statComponents = props.stats ? [\r\n        <StatCard\r\n            label=\"Favorite Artists\"\r\n            list={props.stats.favoriteArtists}\r\n        />,\r\n        <StatCard\r\n            label=\"Top Genres\"\r\n            list={props.stats.favoriteGenres}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Most Danceable\"\r\n            minLabel=\"Least Danceable\"\r\n            maxSong={props.stats.max_danceability}\r\n            minSong={props.stats.min_danceability}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Most Energetic\"\r\n            minLabel=\"Least Energetic\"\r\n            maxSong={props.stats.max_energy}\r\n            minSong={props.stats.min_energy}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Most Instrumental\"\r\n            minLabel=\"Least Instrumental\"\r\n            maxSong={props.stats.max_instrumentalness}\r\n            minSong={props.stats.min_instrumentalness}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Liveliest\"\r\n            minLabel=\"Least Lively\"\r\n            maxSong={props.stats.max_liveness}\r\n            minSong={props.stats.min_liveness}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Loudest\"\r\n            minLabel=\"Quietest\"\r\n            maxSong={props.stats.max_loudness}\r\n            minSong={props.stats.min_loudness}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Most Speech/Vocals\"\r\n            minLabel=\"Least Speech/Vocals\"\r\n            maxSong={props.stats.max_speechiness}\r\n            minSong={props.stats.min_speechiness}\r\n        />,\r\n        <StatCard\r\n            maxLabel=\"Fastest Tempo\"\r\n            minLabel=\"Slowest Tempo\"\r\n            maxSong={props.stats.max_tempo}\r\n            minSong={props.stats.min_tempo}\r\n        />,\r\n    ] : null;\r\n\r\n\r\n    return (\r\n        <div className=\"stat-card-container\">\r\n            {statComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListTab;","import { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, BarChart, XAxis, YAxis, Bar, CartesianGrid } from 'recharts';\r\n\r\nconst ChartTab = (props) => {\r\n    const artistDataToGraph = (songs) => {\r\n        let freq = {};\r\n        for (let s of songs) {\r\n            for (let a of s.track.artists) {\r\n                if (a.name in freq) {\r\n                    freq[a.name]++;\r\n                } else {\r\n                    freq[a.name] = 1;\r\n                }\r\n            }\r\n        }\r\n        console.log(freq);\r\n        let data = [];\r\n        for (let [key, value] of Object.entries(freq)) {\r\n            data.push({\r\n                name: key,\r\n                value: value\r\n            })\r\n        }\r\n        data.sort(function (a, b) {\r\n            return b.value - a.value;   // sort in decreasing order\r\n        })\r\n        // console.log(data);\r\n        return data;\r\n    }\r\n\r\n    const genreDataToGraph = (freq) => {\r\n        let data = [];\r\n        for (let [key, value] of Object.entries(freq)) {\r\n            data.push({\r\n                name: key,\r\n                value: value\r\n            })\r\n        }\r\n        data.sort(function (a, b) {\r\n            return b.value - a.value;   // sort in decreasing order\r\n        })\r\n        // console.log(data);\r\n        return data;\r\n    }\r\n\r\n    const artistData = props.selectedSongs ? artistDataToGraph(props.selectedSongs) : null;\r\n    console.log(artistData);\r\n    const genreData = props.stats ? genreDataToGraph(props.stats.allGenres) : null;\r\n    \r\n    const containerHeight = artistData.length * 25 + genreData.length * 25;\r\n\r\n    return (\r\n        <div>\r\n            {artistData && genreData ?\r\n\r\n                <div className=\"charts\" style={{ height: containerHeight }}>\r\n\r\n                    <p className=\"chart-title\">Artist Frequencies</p>\r\n                    <ResponsiveContainer width=\"100%\" height=\"50%\">\r\n                        <BarChart\r\n                            width={600}\r\n                            height={500}\r\n                            data={artistData}\r\n                            layout=\"vertical\"\r\n                            barSize={20}\r\n                            margin={{\r\n                                top: 5,\r\n                                right: 20,\r\n                                left: 50,\r\n                                bottom: 5,\r\n                            }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis type=\"number\" />\r\n                            <YAxis dataKey=\"name\" type=\"category\" />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"value\" fill=\"#8884d8\" name=\"Frequency\" />\r\n                        </BarChart>\r\n                        {/* <PieChart width={400} height={400} className=\"piechart\">\r\n                    <Pie\r\n                        dataKey=\"value\"\r\n                        isAnimationActive={false}\r\n                        data={chartData}\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={80}\r\n                        fill=\"#8884d8\"\r\n                        startAngle={90}\r\n                        endAngle={450}\r\n                    />\r\n                    <Tooltip />\r\n                </PieChart> */}\r\n                    </ResponsiveContainer>\r\n\r\n                    <p className=\"chart-title\">Genre Frequencies</p>\r\n                    <ResponsiveContainer width=\"100%\" height=\"50%\">\r\n                        <BarChart\r\n                            width={600}\r\n                            height={500}\r\n                            data={genreData}\r\n                            layout=\"vertical\"\r\n                            barSize={20}\r\n                            margin={{\r\n                                top: 5,\r\n                                right: 20,\r\n                                left: 50,\r\n                                bottom: 5,\r\n                            }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis type=\"number\" />\r\n                            <YAxis dataKey=\"name\" type=\"category\" />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"value\" fill=\"#8884d8\" name=\"Frequency\" />\r\n\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n                : null }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartTab;","import React from 'react';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\n\r\nimport ListTab from '../components/ListTab';\r\nimport ChartTab from '../components/ChartTab';\r\n\r\n\r\nconst StatSection = (props) => {\r\n\r\n    return (\r\n        <div className=\"stat-tab\">\r\n            <h5>Playlist Stats</h5>\r\n            <Tabs defaultActiveKey=\"stat\" id=\"tabs\" className=\"tabs\">\r\n                <Tab eventKey=\"stat\" title=\"Superlatives\" className=\"list-tab\">\r\n                    <ListTab stats={props.stats}/>\r\n                </Tab>\r\n                \r\n                <Tab eventKey=\"chart\" title=\"Charts\" className=\"chart-tab\">\r\n                    <ChartTab {...props} />    \r\n                </Tab>\r\n\r\n            </Tabs>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatSection;","import axios from 'axios';\r\n\r\n\r\nconst backendURL = \"http://localhost:5000\";\r\n\r\n\r\nexport const fetchProfileName = (token, setFunc) => {\r\n    axios.get(backendURL + \"/profilename\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            params: {\r\n                accessToken: token\r\n            }\r\n        })\r\n        .then((res) => {\r\n            setFunc(res.data.displayName);\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n\r\nexport const fetchAllPlaylists = (token, setFunc) => {\r\n    axios.get(backendURL + \"/playlists\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            params: {\r\n                accessToken: token\r\n            }\r\n        })\r\n        .then((res) => {\r\n            setFunc(res.data.playlists);\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n\r\nexport const fetchAPlaylist = async(token, url) => {\r\n    const get100Songs = async(offset, token, url) => {\r\n        let list = [];\r\n        await axios.get(backendURL + \"/getplaylist\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                params: {\r\n                    accessToken: token,\r\n                    url: url,\r\n                    offset: offset\r\n                }\r\n            })\r\n            .then((res) => {\r\n                // console.log(res.data.songs);\r\n                list = res.data.songs;\r\n            })\r\n            .catch(err => console.log(err));\r\n        return list;\r\n    }\r\n\r\n\r\n    let fullList = [];\r\n    let offset = 0;\r\n    let isComplete = false;\r\n\r\n    while (!isComplete) {\r\n        await get100Songs(offset, token, url)\r\n            .then(result => {\r\n                // console.log(result);\r\n                if (result.length < 100) {\r\n                    isComplete = true;\r\n                }\r\n                fullList.push(...result)\r\n                offset += 100;\r\n            })\r\n    }\r\n    return fullList;\r\n}\r\n\r\n\r\n\r\nexport const fetchAudioFeatures = async(token, selectedSongs) => {\r\n    const get100Audio = async(token, url) => {\r\n        let list = [];\r\n        await axios.get(backendURL + \"/audiofeatures\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                params: {\r\n                    accessToken: token,\r\n                    url: url,\r\n                    // selectedSongs: selectedSongs\r\n                },\r\n            })\r\n            .then((res) => {\r\n                list = res.data.audioFeatures;\r\n            })\r\n            .catch(err => console.log(err));\r\n        return list;\r\n    }\r\n\r\n\r\n    // put song ids into a list to be passed into audio features query\r\n    let idList = selectedSongs.map((s) => {\r\n        return s.track.id;\r\n    })\r\n    let url = \"\";\r\n    let allAudio = [];\r\n\r\n    while (idList.length > 0) {\r\n        let ids = \"\";\r\n        let count = 0;\r\n        for (let s of idList) {\r\n            ids += s + \",\"; // accumulate id's in a string 100 at a time\r\n            count++;\r\n            if (count == 100) {\r\n                break;\r\n            }\r\n        }\r\n        if (count >= idList.length) {\r\n            idList = [];\r\n        } else {\r\n            idList = idList.slice(count);\r\n        }\r\n\r\n        ids = ids.slice(0, -1);\r\n        url = \"https://api.spotify.com/v1/audio-features?ids=\";\r\n        url += ids;\r\n\r\n        await get100Audio(token, url)\r\n            .then(result => {\r\n                allAudio.push(...result);\r\n            })\r\n    }\r\n    return allAudio;\r\n}\r\n\r\n\r\nexport const fetchArtistFeatures = async(token, selectedSongs) => {\r\n    const get50Artists = async(token, url) => {\r\n        let list = {};\r\n        await axios.get(backendURL + \"/artistgenres\", {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                params: {\r\n                    accessToken: token,\r\n                    url: url,\r\n                },\r\n            })\r\n            .then((res) => {\r\n                list = res.data.genreStats;\r\n            })\r\n            .catch(err => console.log(err));\r\n        return list;\r\n    }\r\n\r\n\r\n    // put artist ids into a list \r\n    let idList = selectedSongs.map((s) => {\r\n        // console.log(s.track.artists[0].name);\r\n        return s.track.artists[0].id;\r\n    })\r\n    let url = \"\";\r\n    let allGenres = [];\r\n\r\n    while (idList.length > 0) {\r\n        let ids = \"\";\r\n        let count = 0;\r\n        for (let s of idList) {\r\n            ids += s + \",\"; // accumulate id's in a string 100 at a time\r\n            count++;\r\n            if (count == 50) {\r\n                break;\r\n            }\r\n        }\r\n        if (count >= idList.length) {\r\n            idList = [];\r\n        } else {\r\n            idList = idList.slice(count);\r\n        }\r\n\r\n        ids = ids.slice(0, -1);\r\n        url = \"https://api.spotify.com/v1/artists?ids=\";\r\n        url += ids;\r\n\r\n        await get50Artists(token, url)\r\n            .then(result => {\r\n                allGenres.push(result);\r\n            })\r\n    }\r\n    return allGenres;\r\n}\r\n\r\n\r\nexport const fetchStats = (audio, genres, selectedSongs, setFunc) => {\r\n    axios.post(backendURL + \"/audiostats\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                audioFeatures: audio,\r\n                artistGenres: genres,\r\n                selectedSongs: selectedSongs\r\n            }\r\n        })\r\n        .then(res => {\r\n            setFunc(res.data.stats);\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n\r\nexport const fetchLyrics = (title, artist, setFunc) => {\r\n    axios.get(backendURL + \"/lyrics\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            params: {\r\n                title: title,\r\n                artist: artist\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res.data);\r\n            setFunc(res.data);\r\n        })\r\n        .catch(err => console.log(err));\r\n}","import Playlists from './components/Playlists';\r\nimport SongSection from './sections/SongSection';\r\nimport LyricSection from './sections/LyricSection';\r\nimport StatSection from './sections/StatSection';\r\nimport { fetchAllPlaylists, fetchAPlaylist, fetchAudioFeatures, fetchStats, fetchLyrics, fetchProfileName, fetchArtistFeatures } from './functions/backendCalls';\r\nimport { mergeObjects } from './functions/helperFunctions';\r\nimport './styles.scss';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Navbar, Button, Spinner, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { Split } from '@geoffcox/react-splitter';\r\n\r\n\r\n\r\n\r\nconst Main = (props) => {\r\n    const [username, setUsername] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null);\r\n    const [showPlaylists, setShowPlaylists] = useState(false);\r\n    const [selectedSongs, setSelectedSongs] = useState(null);\r\n    const [audioFeatures, setAudioFeatures] = useState(null);\r\n    const [artistGenres, setArtistGenres] = useState(null);\r\n    const [statsObject, setStatsObject] = useState(null);\r\n    const [clickedSong, setClickedSong] = useState(null);\r\n    const [lyrics, setLyrics] = useState(null);\r\n\r\n\r\n    // called when page first loads\r\n    const loadPage = async () => {\r\n        if (!username) {\r\n            fetchProfileName(props.token, setUsername);\r\n        }\r\n        if (!playlists) {\r\n            fetchAllPlaylists(props.token, setPlaylists);\r\n        }\r\n    }\r\n\r\n\r\n    const selectPlaylist = (p) => {\r\n        if (p !== selectedPlaylist) {\r\n            setSelectedPlaylist(null);  // to clear previous playlist info\r\n            setClickedSong(null);\r\n            setSelectedSongs(null);\r\n            setAudioFeatures(null);\r\n            setStatsObject(null);\r\n            setLyrics(null);\r\n            setSelectedPlaylist(p);\r\n            setShowPlaylists(false);\r\n            console.log(\"selecting \" + p.name);\r\n\r\n            fetchAPlaylist(props.token, p.href)\r\n                .then(result => {\r\n                    console.log(result);\r\n                    setSelectedSongs(result);\r\n                });\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const getAudioFeatures = () => {\r\n        if (selectedSongs) {\r\n            fetchAudioFeatures(props.token, selectedSongs)\r\n                .then(result => {\r\n                    // console.log(result);\r\n                    setAudioFeatures(result);\r\n                });\r\n        }\r\n    }\r\n\r\n    const getArtistFeatures = () => {\r\n        if (selectedSongs) {\r\n            fetchArtistFeatures(props.token, selectedSongs)\r\n                .then(result => {\r\n                    // console.log(mergeObjects(result));\r\n                    setArtistGenres(mergeObjects(result));\r\n                });\r\n        }\r\n    }\r\n\r\n    const getStats = () => {\r\n        // console.log(audioFeatures);\r\n        // console.log(artistGenres);\r\n        if (audioFeatures && artistGenres && selectedSongs) {\r\n            fetchStats(audioFeatures, artistGenres, selectedSongs, setStatsObject)\r\n        }\r\n    }\r\n\r\n\r\n    const getLyrics = () => {\r\n        setLyrics(null);\r\n        if (clickedSong != null) {\r\n\r\n            const title = selectedSongs[clickedSong].track.name;\r\n            const artist = selectedSongs[clickedSong].track.artists[0].name;\r\n            console.log(title + \" \" + artist);\r\n\r\n            fetchLyrics(title, artist, setLyrics);\r\n        }\r\n    }\r\n\r\n\r\n    const selectSong = (songIndex) => {\r\n        setClickedSong(songIndex);\r\n    };\r\n\r\n\r\n    const renderLyrics = () => {\r\n        if (lyrics) {\r\n\r\n            console.log(lyrics);\r\n            let card = document.querySelector(`#song-info-${clickedSong}`);\r\n            if (lyrics.path === \"ERROR\" && !lyrics.lyricHTML) {\r\n                setLyrics({\r\n                    path: \"ERROR\",\r\n                    lyricHTML: [\"<p className=\\\"no-lyric-msg\\\">Lyrics could not be found<p>\"]\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleShowPlaylist = () => {\r\n        setShowPlaylists(!showPlaylists);\r\n    }\r\n\r\n\r\n    useEffect(loadPage, []);\r\n\r\n    useEffect(async() => {\r\n        getAudioFeatures();\r\n        getArtistFeatures();\r\n    }, [selectedSongs]);\r\n\r\n    useEffect(getStats, [audioFeatures, artistGenres]);\r\n\r\n    useEffect(getLyrics, [clickedSong]);\r\n\r\n    useEffect(renderLyrics, [lyrics]);\r\n\r\n    const loadingSpinner =\r\n        <div className=\"triple-spinners\">\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n            <Spinner animation=\"grow\" variant=\"success\" size=\"sm\" className=\"spinner\" />\r\n\r\n        </div>\r\n\r\n    const renderTooltip = props => (\r\n        <Tooltip {...props}>Note: This will briefly open a new window. You will need to log back in to view this page.</Tooltip>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Navbar expand=\"lg\" className=\"my-navbar justify-content-between\">\r\n                <Navbar.Brand className=\"nav-text nav-title\">\r\n                    Statify\r\n                </Navbar.Brand>\r\n                <div className=\"nav-right\">\r\n                    <Navbar.Text className=\"nav-text\">\r\n                        Signed in as: {username}\r\n                    </Navbar.Text>\r\n                    <OverlayTrigger placement=\"bottom\" overlay={renderTooltip}>\r\n                        <Button onClick={props.signOut} variant=\"outline-info\" size=\"sm\" data-rh=\"tooltip 1\">Sign Out</Button>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            </Navbar>\r\n\r\n            <div className=\"body\" >\r\n                {!selectedPlaylist || showPlaylists ?\r\n                    <div className=\"playlists-section\">\r\n                        <Playlists\r\n                            list={playlists}\r\n                            select={selectPlaylist}\r\n                            selected={selectedPlaylist}\r\n                            hide={toggleShowPlaylist}\r\n                            visible={showPlaylists}\r\n                        />\r\n                    </div>\r\n                    : null}\r\n\r\n\r\n                {selectedPlaylist && audioFeatures ?\r\n                    <div className=\"stats-section scroll-container\">\r\n                        <Split initialPrimarySize=\"33%\" minPrimarySize=\"25%\" minSecondarySize=\"50%\">\r\n                            <div className=\"song-column\">\r\n                                <SongSection playlist={selectedPlaylist.name} showPlaylists={showPlaylists} hideFunc={toggleShowPlaylist} selectedSongs={selectedSongs} audioFeatures={audioFeatures} selectSongFunc={selectSong} />\r\n                            </div>\r\n                            <Split initialPrimarySize=\"60%\" minPrimarySize=\"30%\" minSecondarySize=\"30%\">\r\n                                <div className=\"stat-column\">\r\n                                    <StatSection stats={statsObject} selectedSongs={selectedSongs}/>\r\n                                        {/* genres={artistGenres} CRASHES THE PROGRAM why */}\r\n                                </div>\r\n                                <div className=\"lyric-column\">\r\n                                    <LyricSection song={selectedSongs[clickedSong]} lyrics={lyrics} songClicked={clickedSong !== null} />\r\n                                </div>\r\n\r\n                            </Split>\r\n                        </Split>\r\n                    </div>\r\n                    : selectedPlaylist ? loadingSpinner : <h6>Select a playlist to get started!</h6>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nconst Auth = (code) => {\r\n    const [accessToken, setAccessToken] = useState();\r\n    const [refreshToken, setRefreshToken] = useState();\r\n    const [expiresIn, setExpiresIn] = useState();\r\n\r\n    const [user, setUser] = useState();\r\n\r\n    useEffect(() => {\r\n\r\n        axios.post('http://localhost:5000/login', { code })\r\n            .then(res => {\r\n                console.log(res.data.body)\r\n\r\n                // store the tokens from backend in this Auth object\r\n                setAccessToken(res.data.accessToken)\r\n                setRefreshToken(res.data.refreshToken)\r\n                setExpiresIn(res.data.expiresIn)\r\n\r\n                window.history.pushState({}, null, '/')\r\n            })\r\n            .catch(() => {\r\n                window.location = '/'\r\n            });\r\n\r\n        /*\r\n        axios.get('http://localhost:5000/user', { accessToken })\r\n            .then(res => {\r\n                setUser(res.data.user);\r\n                console.log(user);\r\n            })\r\n            .catch(err => console.log(err));\r\n            */\r\n\r\n\r\n    }, [code]); // call useEffect when code changes\r\n\r\n    // call refresh in server whenever both refreshToken and expiresIn changes\r\n    useEffect(() => {\r\n        if (!refreshToken || !expiresIn) {\r\n            return;\r\n        }\r\n\r\n        // call /refresh endpoint one minute before expiring\r\n        const interval = setInterval(() => {\r\n            axios.post('http://localhost:5000/refresh', { refreshToken })\r\n                .then(res => {\r\n                    console.log(res.data)\r\n\r\n                    // store the tokens from backend in this Auth object \r\n                    // same thing as above but without refresh token\r\n                    setAccessToken(res.data.accessToken)\r\n                    setExpiresIn(res.data.expiresIn)\r\n                })\r\n                .catch(() => {\r\n                    window.location = '/'\r\n                })\r\n        }, (expiresIn - 60) * 1000)\r\n\r\n        return () => clearInterval(interval);\r\n    }, [refreshToken, expiresIn])\r\n\r\n    return accessToken;\r\n}\r\n\r\nexport default Auth;","import Main from './Main';\r\nimport Auth from './functions/Auth';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Token = (props) => {\r\n    const [token, setToken] = useState(null);\r\n\r\n    async function getToken(code) {\r\n        const accessToken = await Promise.resolve(Auth(code));\r\n        return accessToken;\r\n    }\r\n\r\n    getToken(props.code).then((res) => {\r\n        setToken(res);\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {token ? \r\n            <Main token={token} {...props}/>\r\n            : <p><br />Server is not currently running at this time.</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Token;","import React, { useState, useEffect } from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Login from './Login';\r\nimport Main from './Main';\r\nimport Token from './Token';\r\n\r\n\r\nfunction App() {\r\n  const [signedIn, setSignedIn] = useState(false)\r\n  const [code, setCode] = useState(null);\r\n  // const [token, setToken] = useState('');\r\n  \r\n  useEffect(() => {\r\n    // const credentials = ApiKey();\r\n    setCode(new URLSearchParams(window.location.search).get(\"code\"));\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (code) {\r\n      setSignedIn(true);\r\n\r\n    }\r\n  }, [code]);\r\n\r\n  const signOut = () => {\r\n    // open up a Spotify logout window\r\n    const url = 'https://www.spotify.com/logout/'\r\n    const spotifyLogoutWindow = window.open(url, 'Spotify Logout', 'width=10,height=10,top=4000,left=4000')\r\n    setTimeout(() => spotifyLogoutWindow.close(), 500);\r\n\r\n    setSignedIn(false);\r\n    setCode(null);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {code && signedIn ? <Token code={code} signOut={signOut} /> : <Login />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}